import javax.swing.JPanel;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BSCLayersMngr {
    private final Map<JPanel, List<BSC>> layerMap;
    private final List<JPanel> layerList;
    public static int bscCounter;

    public BSCLayersMngr() {
        layerMap = new HashMap<>();
        layerList = new ArrayList<>();
        bscCounter = 0;
    }

    public void addBSCLayer(JPanel layer) {
        // Create an empty list for the layer if it doesn't exist
        if (!layerMap.containsKey(layer)) {
            layerMap.put(layer, new ArrayList<>());
            layerList.add(layer);
        }
    }

    public void addBscToLayer(JPanel layer, BSC bsc) {
        // Add the object to the corresponding layer
        layerMap.get(layer).add(bsc);
    }

    public BSC findFreeBSConLayer(int layerIndex) {
        JPanel bscLayer = null;
        int bscInd = 0;
        int minimalNumOfProcessedMsgs = 5;
        if (layerIndex >= 0 && layerIndex < layerList.size()) {
            JPanel layer = layerList.get(layerIndex);
            for (BSC bsc : layerMap.get(layer)) {
                int bscNumOfProcessedMsgs = bsc.numberOfProcessedMessages;
                if (bscNumOfProcessedMsgs < minimalNumOfProcessedMsgs) {
                    minimalNumOfProcessedMsgs = bscNumOfProcessedMsgs;
                    bscLayer = layer;
                    bscInd = layerMap.get(layer).indexOf(bsc);
                }
            }
            if (minimalNumOfProcessedMsgs != 5) return layerMap.get(bscLayer).get(bscInd);
            return SMSApp.createNewBSConLayer(layer);
        }
        return null;
    }

    public int getTotalBscCount() {
        return bscCounter;
    }

    public JPanel getLayerFromBsc(BSC bsc) {
        for (JPanel layer : layerList) {
            if (layerMap.get(layer).contains(bsc)) return layer;
        }
        return null;
    }

    public void removeLayer(JPanel layer) {
        // Remove the specified layer and its associated BSC objects
        layerMap.remove(layer);
        layerList.remove(layer);
        for (int i = 0; i < layer.getComponentCount(); i++) bscCounter--;
    }

    public void removeBscFromLayer(JPanel layer, BSC bsc) {
        // Remove the specified BSC object from the layer
        layerMap.get(layer).remove(bsc);
    }

    public int getLayersNumber() {
        // Get the number of layers stored in the layerMap
        return layerList.size();
    }

    public JPanel getLastLayer() {
        return layerList.get(layerList.size() - 1);
    }
}
