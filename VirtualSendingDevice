import javax.swing.*;
import javax.swing.border.LineBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class VirtualSendingDevice {
    private String message;
    private final String deviceNumber;
    private JPanel vbdObjectPanel;
    private int sliderValue = 1;
    private boolean vbdState = true;
    private static int deviceCounter = 1;
    private JComboBox<String> stateComboBox;
    private JSlider frequencySlider;
    private List<Thread> sendingThreads;

    public VirtualSendingDevice(String msg) {
        this.message = msg;
        this.deviceNumber = generateRandomSMSCAddress();
        this.sendingThreads = new ArrayList<>();
        if (msg != null && !msg.isEmpty()) {
            vbdObjectPanel = new JPanel();
            vbdObjectPanel.setLayout(new BoxLayout(vbdObjectPanel, BoxLayout.Y_AXIS));
            vbdObjectPanel.setBorder(new LineBorder(Color.DARK_GRAY, 1));

            frequencySlider = new JSlider(JSlider.HORIZONTAL, 1, 60, 1);
            frequencySlider.setMinorTickSpacing(3);
            frequencySlider.setPaintTicks(true);
            frequencySlider.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseReleased(MouseEvent e) {
                    int newSliderValue = frequencySlider.getValue();
                    if (sliderValue != newSliderValue) {
                        sliderValue = newSliderValue;
                        if (vbdState) {
                            restartSendingThread();
                        }
                    }
                }
            });

            JLabel frequencyLabel = new JLabel("Frequency:");
            JPanel frequencyPanel = new JPanel(new BorderLayout());
            frequencyPanel.add(frequencyLabel, BorderLayout.WEST);
            frequencyPanel.add(frequencySlider, BorderLayout.CENTER);

            JTextField deviceNumberField = new JTextField(this.getDeviceNumber());
            deviceNumberField.setEditable(false);
            JLabel deviceNumberLabel = new JLabel("Device Number:");
            JPanel deviceNumberPanel = new JPanel(new BorderLayout());
            deviceNumberPanel.add(deviceNumberLabel, BorderLayout.WEST);
            deviceNumberPanel.add(deviceNumberField, BorderLayout.CENTER);

            stateComboBox = new JComboBox<>(new String[]{"ACTIVE", "WAITING"});
            stateComboBox.addActionListener(whenComboBoxChanged -> {
                vbdState = Objects.equals(stateComboBox.getSelectedItem(), "ACTIVE");
                if (vbdState) {
                    restartSendingThread();
                } else {
                    stopSendingThread();
                }
            });

            JLabel stateLabel = new JLabel("State:");
            JPanel statePanel = new JPanel(new BorderLayout());
            statePanel.add(stateLabel, BorderLayout.WEST);
            statePanel.add(stateComboBox, BorderLayout.CENTER);

            JButton terminateVBDButton = new JButton("Terminate");
            terminateVBDButton.addActionListener(whenTerminateButtonClicked -> {
                vbdState = false;
                stopSendingThread();
                SMSApp.removeVBDObjectFromPanel(vbdObjectPanel);
            });
            JLabel buttonLabel = new JLabel("Terminate VBD button:");
            JPanel buttonPanel = new JPanel();
            buttonPanel.add(buttonLabel, BorderLayout.WEST);
            buttonPanel.add(terminateVBDButton, BorderLayout.CENTER);

            vbdObjectPanel.add(frequencyPanel);
            vbdObjectPanel.add(deviceNumberPanel);
            vbdObjectPanel.add(statePanel);
            vbdObjectPanel.add(buttonPanel);

            restartSendingThread();
        }
    }

    private void restartSendingThread() {
        stopSendingThread();
        sendingThreads.clear();

        for (int i = 0; i < sliderValue; i++) {
            final int threadDelay = i;
            Thread sendingThread = new Thread(() -> {
                try {
                    Thread.sleep(60000 / sliderValue * threadDelay);
                    startSendingMessages();
                } catch (InterruptedException e) {
                    System.out.println("A message transmission was interrupted.");
                    Thread.currentThread().interrupt();
                }
            });
            sendingThreads.add(sendingThread);
            sendingThread.start();
        }
    }


    private void stopSendingThread() {
        for (Thread thread : sendingThreads) {
            if (thread != null) {
                thread.interrupt();
                try {
                    thread.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
        sendingThreads.clear();
    }

    private void startSendingMessages() {
        while (vbdState) {
            BTS freeLeftBTS = BTS.findFreeLeftBTSStation();
            freeLeftBTS.increaseNumberOfProcessedMessages();
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                return;
            }
            freeLeftBTS.decreaseNumberOfProcessedMessages();

            if (!vbdState) return;

            iterateThroughAllBSCLayers();

            if (!vbdState) return;

            BTS freeRightBTS = BTS.findFreeRightBTSStation();
            freeRightBTS.increaseNumberOfProcessedMessages();
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                System.out.println("A message transmission was interrupted.");
                Thread.currentThread().interrupt();
                return;
            }
            freeRightBTS.decreaseNumberOfProcessedMessages();

            if (!vbdState) return;

            try {
                VirtualReceivingDevice.chooseRandomVRD().receiveSMS(message);
            } catch (IndexOutOfBoundsException e) {
                System.out.println("The recipient for the " + deviceNumber + " doesn't exist");
            }

            try {
                Thread.sleep(60000 / sliderValue);
            } catch (InterruptedException e) {
                System.out.println("A message transmission was interrupted.");
                Thread.currentThread().interrupt();
            }
        }
    }

    private void iterateThroughAllBSCLayers() {
        for (int i = 0; i < SMSApp.bscLayersMngr.getLayersNumber(); i++) {
            if (!vbdState) break;
            BSC bsc = SMSApp.bscLayersMngr.findFreeBSConLayer(i);
            bsc.increaseNumberOfProcessedMessages();
            int delay = generateRandomDelay() * 1000;
            try {
                Thread.sleep(delay);
            } catch (InterruptedException e) {
                System.out.println("You've just stopped transmission of a message");
                Thread.currentThread().interrupt();
                return;
            }
            bsc.decreaseNumberOfProcessedMessages();
        }
    }

    private int generateRandomDelay() {
        return (int) (Math.random() * (15 - 5 + 1) + 5);
    }

    public JPanel getVbdObjectPanel() {
        return vbdObjectPanel;
    }

    public String getDeviceNumber() {
        return deviceNumber;
    }

    private static String generateRandomSMSCAddress() {
        String[] prefixes = { "+380", "+1", "+375", "+48", "+235" };
        int prefixIndex = (int) (Math.random() * 5);
        String address = prefixes[prefixIndex];
        for (int i = 0; i < 8; i++) {
            int digit = (int) (Math.random() * 10);
            address += digit;
        }
        return address;
    }
}
