import javax.swing.*;
import javax.swing.border.LineBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

/*
use interfaces or events to divide the visual and the logic part
Horseman Javacore userinterfaces - book to understand that
1. Узнать по поводу детализации с лейблами каждого элемента в объекте
2. Узнать правильно ли я создал панели и нормальное ли их количество
3. Узнать нормально ли что нету скролл пейна в бсц и бтс панелях
чекнуть стак бсц и их удаление там по хуйне братан.. респект тебе за твои старания и уважуха..
чекнуть почему панель бтсиков не растягивается на всю высоту панели
добавлять потоки топа и реков
 */

public class SMSApp extends JFrame implements ActionListener {

    private final JPanel sendingPanel;
    private final JPanel receivingPanel;
    private final JPanel middlePanel;
    private final JButton vbdButton = new JButton("     Add a VBD     ");
    private final JButton vrdButton = new JButton("     Add a VRD     ");
    private final JButton bscAddButton = new JButton("   Add a BSC Layer   ");
    private final JButton bscRemoveButton = new JButton("   Remove a BSC Layer   ");
    private final JPanel vbdPanel;
    private final JPanel vrdPanel;
    private final JPanel bscLayersPanel;
    private final JPanel btsLeftLayer;
    private final JPanel btsRightLayer;
    private int stationsOnLeftBTS = 0;
    private int stationsOnRightBTS = 0;
    private ArrayList<JPanel> bscLayersArray;

    SMSApp() {
        // Properties of my main frame
        setSize(1400, 800);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setTitle("SMSApp made by Yegor Burykin");

        // My three main panels that will contain everything
        sendingPanel = new JPanel();
        sendingPanel.setLayout(new BorderLayout());

        receivingPanel = new JPanel();
        receivingPanel.setLayout(new BorderLayout());

        middlePanel = new JPanel();
        middlePanel.setLayout(new BorderLayout());

        // Create a panel to hold the BTS and BSC stations
        JPanel stationsPanel = new JPanel();
        stationsPanel.setLayout(new BoxLayout(stationsPanel, BoxLayout.X_AXIS));

        // Create left and right panels for the BTS stations
        btsLeftLayer = new JPanel();
        btsRightLayer = new JPanel();
        btsLeftLayer.setBorder(new LineBorder(Color.DARK_GRAY, 2));
        btsRightLayer.setBorder(new LineBorder(Color.DARK_GRAY, 2));
        btsRightLayer.setLayout(new BoxLayout(btsRightLayer, BoxLayout.Y_AXIS));
        btsLeftLayer.setLayout(new BoxLayout(btsLeftLayer, BoxLayout.Y_AXIS));

        BTS btsLeft = new BTS();
        BTS btsRight = new BTS();
        btsLeft.getRemoveStationButton().setEnabled(false);
        btsRight.getRemoveStationButton().setEnabled(false);

        stationsOnLeftBTS++;
        btsLeftLayer.add(btsLeft.getBtsPanel());

        stationsOnRightBTS++;
        btsRightLayer.add(btsRight.getBtsPanel());

        // Adding one more BTS station to the left if processed messages are more than 5
        for (int i = 0; i < btsLeft.numberOfProcessedMessages / 5; i++) {
            stationsOnLeftBTS++;

            BTS AdditionalLeftBts = new BTS();


            btsLeftLayer.add(AdditionalLeftBts.getBtsPanel());

            // Repaint and revalidate the middlePanel
            revalidateRepaintPanel(middlePanel);

            AdditionalLeftBts.getRemoveStationButton().addActionListener(whenRemoveStationButtonClicked -> {
                if (stationsOnLeftBTS > 1) {
                    btsLeftLayer.remove(AdditionalLeftBts.getBtsPanel());
                    stationsOnLeftBTS--;
                    revalidateRepaintPanel(middlePanel);
                }
            });
        }

        // Adding one more BTS station to the right if processed messages are more than 5
        for (int i = 0; i < btsRight.numberOfProcessedMessages / 5; i++) {
            stationsOnRightBTS++;

            BTS AdditionalRightBts = new BTS();


            btsRightLayer.add(AdditionalRightBts.getBtsPanel());

            // Repaint and revalidate the sendingPanel
            revalidateRepaintPanel(middlePanel);

            AdditionalRightBts.getRemoveStationButton().addActionListener(whenRemoveStationButtonClicked -> {
                if (stationsOnRightBTS > 1) {
                    btsRightLayer.remove(AdditionalRightBts.getBtsPanel());
                    stationsOnRightBTS--;
                    revalidateRepaintPanel(middlePanel);
                }
            });
        }

        // Create a panel for the BSC stations
        bscLayersPanel = new JPanel();
        bscLayersPanel.setLayout(new BoxLayout(bscLayersPanel, BoxLayout.X_AXIS));
        JPanel bscLayer = new JPanel();
        bscLayer.setBorder(new LineBorder(Color.DARK_GRAY, 2));
        bscLayersArray = new ArrayList<>();
        BSC bsc = new BSC();
        bsc.getRemoveStationButton().setEnabled(false);
        bscLayer.add(bsc.getBscPanel());

        bscLayersArray.add(bscLayer);
        bscLayersPanel.add(bscLayer);

        // Add the BTS and BSC layers to the stationsPanel
        stationsPanel.add(btsLeftLayer, BorderLayout.WEST);
        stationsPanel.add(bscLayersPanel, BorderLayout.CENTER);
        stationsPanel.add(btsRightLayer, BorderLayout.EAST);

        // Create a button for adding BSC layers
        bscAddButton.addActionListener(this);
        bscAddButton.setFocusable(false);
        bscRemoveButton.addActionListener(this);
        bscRemoveButton.setFocusable(false);
        updateRemoveBscButton();

        // Create a panel to hold the buttons
        JPanel buttonPanel = new JPanel();
        buttonPanel.setBorder(new LineBorder(Color.DARK_GRAY, 2));
        buttonPanel.setLayout(new FlowLayout(FlowLayout.CENTER));
        buttonPanel.add(bscAddButton);
        buttonPanel.add(bscRemoveButton);

        // Create the JPanel for virtual sending devices (VBD)
        vbdPanel = new JPanel();
        vbdPanel.setLayout(new BoxLayout(vbdPanel, BoxLayout.Y_AXIS));

        // Create the JScrollPane for the VBD panel
        JScrollPane vbdScrollPane = new JScrollPane(vbdPanel);
        vbdScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);

        // Add the scroll pane to the central part of the sendingPanel
        sendingPanel.add(vbdScrollPane, BorderLayout.CENTER);

        // Create the JPanel for VRD
        vrdPanel = new JPanel();
        vrdPanel.setLayout(new BoxLayout(vrdPanel, BoxLayout.Y_AXIS));

        // Create the JScrollPane for the VRD panel
        JScrollPane vrdScrollPane = new JScrollPane(vrdPanel);
        vrdScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);

        // Add the scroll pane to the central part of the receivingPanel
        receivingPanel.add(vrdScrollPane, BorderLayout.CENTER);

        // Add the stationsPanel to the middlePanel
        middlePanel.add(stationsPanel, BorderLayout.CENTER);

        // Create the "Add" VBD button
        vbdButton.setFocusable(false);
        vbdButton.setBackground(Color.LIGHT_GRAY);
        vbdButton.addActionListener(this);

        // Create the "Add" VRD button
        vrdButton.setFocusable(false);
        vrdButton.setBackground(Color.LIGHT_GRAY);
        vrdButton.addActionListener(this);

        // Add the button to the bottom of the panels
        middlePanel.add(buttonPanel, BorderLayout.SOUTH);
        sendingPanel.add(vbdButton, BorderLayout.SOUTH);
        receivingPanel.add(vrdButton, BorderLayout.SOUTH);

        // Set the layout for the main frame
        setLayout(new BorderLayout());

        // Add the panels to the main frame
        add(sendingPanel, BorderLayout.WEST);
        add(receivingPanel, BorderLayout.EAST);
        add(middlePanel, BorderLayout.CENTER);
    }

    public static void main(String[] args) {
        new SMSApp().setVisible(true);
    }

    @Override
    public void actionPerformed(ActionEvent whenButtonClicked) {

        updateRemoveBscButton();

        if (whenButtonClicked.getSource() == vbdButton) {
            String message = JOptionPane.showInputDialog(this, "Enter a short text message:");

            if (message != null && !message.isEmpty()) {
                // Creation of a new VBD object after clicking the Add button in the sending panel
                VirtualSendingDevice vbd = new VirtualSendingDevice(message);
                JPanel vbdObjectPanel = new JPanel();
                vbdObjectPanel.setLayout(new BoxLayout(vbdObjectPanel, BoxLayout.Y_AXIS));
                vbdObjectPanel.setBorder(new LineBorder(Color.DARK_GRAY, 2));

                // Frequency slider
                JSlider frequencySlider = new JSlider(JSlider.HORIZONTAL, 0, 50, 25);
                frequencySlider.setMinorTickSpacing(5);
                frequencySlider.setMajorTickSpacing(10);
                frequencySlider.setPaintTicks(true);
                frequencySlider.setPaintLabels(true);

                // Device number TextField
                JTextField deviceNumberField = new JTextField(vbd.getDeviceNumber());
                deviceNumberField.setEditable(false);

                // State combobox
                JComboBox<String> stateComboBox = new JComboBox<>(new String[]{"WAITING", "ACTIVE"});

                // Terminate VBD button
                JButton terminateVBDButton = new JButton("Terminate");
                terminateVBDButton.addActionListener(whenTerminateButtonClicked -> {
                    vbdPanel.remove(vbdObjectPanel);
                    revalidateRepaintPanel(sendingPanel);
                });

                // Add components to the VBD visualization panel
                vbdObjectPanel.add(frequencySlider);
                vbdObjectPanel.add(terminateVBDButton);
                vbdObjectPanel.add(deviceNumberField);
                vbdObjectPanel.add(stateComboBox);

                // Add the VBD visualization panel to the VBD panel
                vbdPanel.add(vbdObjectPanel);

                // Repaint and revalidate the sendingPanel
                revalidateRepaintPanel(sendingPanel);
            }
        }
        else if (whenButtonClicked.getSource() == vrdButton) {

            // Creation of a new VBD object after clicking the Add button in the receiving panel
            VirtualReceivingDevice vrd = new VirtualReceivingDevice();
            JPanel vrdObjectPanel = new JPanel();
            vrdObjectPanel.setBorder(new LineBorder(Color.DARK_GRAY, 2));

            // Terminate VRD Button
            JButton terminateVRDButton = new JButton("Terminate");
            terminateVRDButton.addActionListener(whenTerminateVBDButtonClicked -> {
                vrdPanel.remove(vrdObjectPanel);
                revalidateRepaintPanel(receivingPanel);
            });

            // Received Messages Label in VRD
            JLabel receivedMsgs = new JLabel("      The number of received messages: " + vrd.getReceivedMessagesCounter() + "       ");

            // CheckBox in VRD
            JCheckBox msgRemoveCheckBox = new JCheckBox("Empty the counter every 10 sec");
            msgRemoveCheckBox.setFocusable(false);

            // Create a JPanel to hold the components of the VRD station
            vrdObjectPanel.setLayout(new BoxLayout(vrdObjectPanel, BoxLayout.Y_AXIS));
            vrdObjectPanel.add(receivedMsgs, BorderLayout.NORTH);
            vrdObjectPanel.add(msgRemoveCheckBox, BorderLayout.CENTER);
            vrdObjectPanel.add(terminateVRDButton, BorderLayout.SOUTH);

            // Add the VRD object panel to the VRD panel
            vrdPanel.add(vrdObjectPanel);

            // Repaint and revalidate the receivingPanel
            revalidateRepaintPanel(receivingPanel);
        }
        else if (whenButtonClicked.getSource() == bscAddButton) {
            // Handle BSC add button click
            BSC bsc = new BSC();
            JPanel bscLayer = new JPanel();
            JPanel bscObjectPanel = bsc.getBscPanel();
            bscLayer.setBorder(new LineBorder(Color.DARK_GRAY, 2));
            bsc.getRemoveStationButton().addActionListener(whenTerminateBSCButtonClicked -> {
                removePanelRevalidate(bscLayer, bscObjectPanel);
                if (bscLayer.getComponentCount() <= 0) {
                    bscLayersPanel.remove(bscLayer);
                    bscLayersArray.remove(bscLayer);
                    updateRemoveBscButton();
                }
            });

            bscLayer.add(bscObjectPanel);
            bscLayersArray.add(bscLayer);
            addPanelRevalidate(bscLayersPanel, bscLayer);

            updateRemoveBscButton();
            updateTerminateBscStationButton();
        }
        else if (whenButtonClicked.getSource() == bscRemoveButton) {
            // Handle BSC remove button click
            if (bscLayersArray.size() > 1) {
                JPanel lastBscLayer = bscLayersArray.get(bscLayersArray.size() - 1);
                int bscInLayer = lastBscLayer.getComponentCount();
                for (int i = 0; i < bscInLayer; i++) BSC.stationCounter--;
                removePanelRevalidate(bscLayersPanel, lastBscLayer);
                bscLayersArray.remove(lastBscLayer);
                updateRemoveBscButton();
                updateTerminateBscStationButton();
            }
        }
    }

    private void addPanelRevalidate(Container subPanel, JPanel panel) {
        subPanel.add(panel);
        revalidateRepaintPanel(subPanel);
    }

    private void removePanelRevalidate(Container subPanel, JPanel panel) {
        subPanel.remove(panel);
        revalidateRepaintPanel(subPanel);
    }

    private void updateRemoveBscButton() {
        bscRemoveButton.setEnabled(bscLayersArray.size() > 1);
    }

    private void updateTerminateBscStationButton() {
        BSC.removeStationButton.setEnabled(BSC.stationCounter > 1);
    }

    private void revalidateRepaintPanel(Component panel) {
        panel.revalidate();
        panel.repaint();
    }
}
