import javax.swing.*;
import javax.swing.border.LineBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;


public class SMSApp extends JFrame implements ActionListener {

    private static JPanel sendingPanel;
    private static JPanel receivingPanel;
    private static JPanel middlePanel;
    private final JButton vbdButton = new JButton("     Add a VBD     ");
    private final JButton vrdButton = new JButton("     Add a VRD     ");
    private final JButton bscAddButton = new JButton("   Add a BSC Layer   ");
    private static final JButton bscRemoveLayerButton = new JButton("   Remove a BSC Layer   ");
    private static JPanel vbdPanel;
    private static JPanel vrdPanel;
    public static BSCLayersMngr bscLayersMngr = new BSCLayersMngr();
    private static final JPanel bscLayersPanel = new JPanel();
    public static JPanel btsLeftLayer;
    public static JPanel btsRightLayer;

    SMSApp() {
        // Properties of my main frame
        setSize(1400, 800);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setTitle("SMSApp made by Yegor Burykin");
        setLayout(new BorderLayout());

        // My three main panels that will contain everything
        sendingPanel = new JPanel();
        sendingPanel.setLayout(new BorderLayout());

        receivingPanel = new JPanel();
        receivingPanel.setLayout(new BorderLayout());

        middlePanel = new JPanel();
        middlePanel.setLayout(new BorderLayout());

        // Create a panel to hold the BTS and BSC stations
        JPanel stationsPanel = new JPanel();
        LineBorder lineBorder = new LineBorder(Color.DARK_GRAY, 2);
        stationsPanel.setLayout(new BoxLayout(stationsPanel, BoxLayout.X_AXIS));
        stationsPanel.setBorder(lineBorder);

        // Create left and right panels for the BTS stations
        btsLeftLayer = new JPanel();
        btsRightLayer = new JPanel();
        btsLeftLayer.setBorder(lineBorder);
        btsRightLayer.setBorder(lineBorder);
        btsLeftLayer.setLayout(new GridLayout(18, 1));
        btsRightLayer.setLayout(new GridLayout(18, 1));

        BTS btsLeft = new BTS(true);
        BTS btsRight = new BTS(false);
        btsLeftLayer.add(btsLeft.getBtsPanel());
        btsRightLayer.add(btsRight.getBtsPanel());

        // Create a panel and a manager for the BSC stations
        bscLayersPanel.setLayout(new BoxLayout(bscLayersPanel, BoxLayout.X_AXIS));
        JPanel bscLayer = new JPanel();
        bscLayer.setBorder(lineBorder);
        bscLayer.setLayout(new GridLayout(15, 1));
        BSC bsc = new BSC();

        bscLayer.add(bsc.getBscPanel());
        bscLayersMngr.addBSCLayer(bscLayer);
        bscLayersMngr.addBscToLayer(bscLayer, bsc);
        bscLayersPanel.add(bscLayer);

        // Add the BTS and BSC layers to the stationsPanel
        stationsPanel.add(btsLeftLayer, BorderLayout.WEST);
        stationsPanel.add(bscLayersPanel, BorderLayout.CENTER);
        stationsPanel.add(btsRightLayer, BorderLayout.EAST);

        // Create a button for adding BSC layers
        bscAddButton.addActionListener(this);
        bscAddButton.setFocusable(false);
        bscRemoveLayerButton.addActionListener(this);
        bscRemoveLayerButton.setFocusable(false);
        updateRemoveBscButton();

        // Create a panel to hold the buttons
        JPanel buttonPanel = new JPanel();
        buttonPanel.setBorder(lineBorder);
        buttonPanel.setLayout(new FlowLayout(FlowLayout.CENTER));
        buttonPanel.add(bscAddButton);
        buttonPanel.add(bscRemoveLayerButton);

        // Create the JPanel for virtual sending devices (VBD)
        vbdPanel = new JPanel();
        vbdPanel.setLayout(new BoxLayout(vbdPanel, BoxLayout.Y_AXIS));

        // Create the JScrollPane for the VBD panel
        JScrollPane vbdScrollPane = new JScrollPane(vbdPanel);
        vbdScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);

        // Add the scroll pane to the central part of the sendingPanel
        sendingPanel.add(vbdScrollPane, BorderLayout.CENTER);

        // Create the JPanel for VRD
        vrdPanel = new JPanel();
        vrdPanel.setLayout(new BoxLayout(vrdPanel, BoxLayout.Y_AXIS));

        // Create the JScrollPane for the VRD panel
        JScrollPane vrdScrollPane = new JScrollPane(vrdPanel);
        vrdScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);

        // Add the scroll pane to the central part of the receivingPanel
        receivingPanel.add(vrdScrollPane, BorderLayout.CENTER);

        // Add the stationsPanel to the middlePanel
        middlePanel.add(stationsPanel, BorderLayout.CENTER);

        // Create the "Add" VBD button
        vbdButton.setFocusable(false);
        vbdButton.setBackground(Color.LIGHT_GRAY);
        vbdButton.addActionListener(this);

        // Create the "Add" VRD button
        vrdButton.setFocusable(false);
        vrdButton.setBackground(Color.LIGHT_GRAY);
        vrdButton.addActionListener(this);

        // Add the button to the bottom of the panels
        middlePanel.add(buttonPanel, BorderLayout.SOUTH);
        sendingPanel.add(vbdButton, BorderLayout.SOUTH);
        receivingPanel.add(vrdButton, BorderLayout.SOUTH);

        // Add the panels to the main frame
        add(sendingPanel, BorderLayout.WEST);
        add(receivingPanel, BorderLayout.EAST);
        add(middlePanel, BorderLayout.CENTER);
    }

    public static void main(String[] args) {
        new SMSApp().setVisible(true);
    }

    @Override
    public void actionPerformed(ActionEvent whenButtonClicked) {
        if (whenButtonClicked.getSource() == vbdButton) {
            String message = JOptionPane.showInputDialog(this, "Enter a short text message:");
            VirtualSendingDevice vbd = new VirtualSendingDevice(message);
            vbdPanel.add(vbd.getVbdObjectPanel());
            revalidateRepaintPanel(sendingPanel);
        }

        else if (whenButtonClicked.getSource() == vrdButton) {
            VirtualReceivingDevice vrd = new VirtualReceivingDevice();
            vrdPanel.add(vrd.getVrdObjectPanel());
            revalidateRepaintPanel(receivingPanel);
        }

        else if (whenButtonClicked.getSource() == bscAddButton) {
            // Handle BSC add button click
            BSC bsc = new BSC();
            JPanel bscLayer = new JPanel();
            JPanel bscObjectPanel = bsc.getBscPanel();
            bscLayer.setBorder(new LineBorder(Color.DARK_GRAY, 2));
            bscLayer.setLayout(new GridLayout(15, 1));
            bscLayer.add(bscObjectPanel);
            bscLayersMngr.addBSCLayer(bscLayer);
            bscLayersMngr.addBscToLayer(bscLayer, bsc);
            addBSCLayerRevalidate(bscLayer);
            System.out.println(bscLayersMngr.getTotalBscCount());
            updateRemoveBscButton();
        }
        else if (whenButtonClicked.getSource() == bscRemoveLayerButton) {
            // Handle BSC remove button click
            if (bscLayersMngr.getLayersNumber() > 1) {
                JPanel lastBscLayer = bscLayersMngr.getLastLayer();
                removePanelRevalidate(bscLayersPanel, lastBscLayer);
                bscLayersMngr.removeLayer(lastBscLayer);
                updateRemoveBscButton();
            }
        }
    }

    private void addBSCLayerRevalidate(JPanel panel) {
        bscLayersPanel.add(panel);
        revalidateRepaintPanel(bscLayersPanel);
    }

    private static void removePanelRevalidate(Container subPanel, JPanel panel) {
        subPanel.remove(panel);
        revalidateRepaintPanel(subPanel);
    }

    private static void updateRemoveBscButton() {
        bscRemoveLayerButton.setEnabled(bscLayersMngr.getLayersNumber() > 1);
    }

    public static void revalidateRepaintPanel(Component panel) {
        panel.revalidate();
        panel.repaint();
    }

    public static BTS createNewLeftBTS(){
        BTS additionalLeftBts = new BTS(true);
        btsLeftLayer.add(additionalLeftBts.getBtsPanel());
        revalidateRepaintPanel(middlePanel);
        return additionalLeftBts;
    }

    public static BTS createNewRightBTS(){
        BTS additionalRightBts = new BTS(false);
        btsRightLayer.add(additionalRightBts.getBtsPanel());
        revalidateRepaintPanel(middlePanel);
        return additionalRightBts;
    }

    public static BSC createNewBSConLayer(JPanel layer) {
        BSC additionalBSC = new BSC();
        layer.add(additionalBSC.getBscPanel());
        bscLayersMngr.addBscToLayer(layer, additionalBSC);
        revalidateRepaintPanel(middlePanel);
        System.out.println(bscLayersMngr.getTotalBscCount());
        return additionalBSC;
    }

    public static void removeBscStationFromPanel(BSC bsc) {
        JPanel layer = bscLayersMngr.getLayerFromBsc(bsc);
        removePanelRevalidate(layer, bsc.getBscPanel());
        bscLayersMngr.removeBscFromLayer(layer, bsc);
        if (layer.getComponentCount() <= 0) {
            bscLayersPanel.remove(layer);
            bscLayersMngr.removeLayer(layer);
            updateRemoveBscButton();
        }
    }

    public static void removeVRDObjectFromPanel(JPanel vrdObjectPanel){
        vrdPanel.remove(vrdObjectPanel);
        revalidateRepaintPanel(receivingPanel);
    }

    public static void removeVBDObjectFromPanel(JPanel vbdObjectPanel) {
        vbdPanel.remove(vbdObjectPanel);
        revalidateRepaintPanel(sendingPanel);
    }
}
