import javax.swing.*;
import javax.swing.border.LineBorder;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class VirtualReceivingDevice {

    private final String deviceNumber;
    private static final List<VirtualReceivingDevice> vrdList = new ArrayList<>();
    private final List<String> messagesReceivedList;
    private final JPanel vrdObjectPanel;
    private final JLabel receivedMsgs;
    private boolean checkBoxWork = true;


    VirtualReceivingDevice() {
        deviceNumber = generateRandomAddress();
        messagesReceivedList = new ArrayList<>();
        vrdList.add(this);
        vrdObjectPanel = new JPanel();
        vrdObjectPanel.setLayout(new BoxLayout(vrdObjectPanel, BoxLayout.Y_AXIS));
        vrdObjectPanel.setBorder(new LineBorder(Color.DARK_GRAY, 2));

        JButton terminateVRDButton = new JButton("Terminate");
        terminateVRDButton.addActionListener(whenTerminateVBDButtonClicked -> {
            SMSApp.removeVRDObjectFromPanel(vrdObjectPanel);
            vrdList.remove(this);
            checkBoxWork = false;
        });
        JLabel terminateVRDLabel = new JLabel("Terminate VRD button:");
        JPanel terminateVRDPanel = new JPanel(new BorderLayout());
        terminateVRDPanel.add(terminateVRDLabel, BorderLayout.WEST);
        terminateVRDPanel.add(terminateVRDButton, BorderLayout.CENTER);

        JLabel receivedMsgsLabel = new JLabel("The number of received messages: ");
        JPanel receivedMsgsPanel = new JPanel(new BorderLayout());
        receivedMsgs = new JLabel(String.valueOf(this.getReceivedMessagesCounter()));
        receivedMsgsPanel.add(receivedMsgsLabel, BorderLayout.WEST);
        receivedMsgsPanel.add(receivedMsgs, BorderLayout.CENTER);

        JCheckBox msgRemoveCheckBox = new JCheckBox();
        msgRemoveCheckBox.setFocusable(false);
        Thread msgRemoveCheckBoxThread = new Thread(() -> {
            while (checkBoxWork) {
                    try {
                        Thread.sleep(10000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                if (msgRemoveCheckBox.isSelected()) {
                    messagesReceivedList.clear();
                    updateReceivedMessagesLabel();
                }
            }
        });
        JLabel msgRemoveLabel = new JLabel("Empty the counter every 10 sec:");
        JPanel msgRemovePanel = new JPanel(new BorderLayout());
        msgRemovePanel.add(msgRemoveLabel, BorderLayout.WEST);
        msgRemovePanel.add(msgRemoveCheckBox, BorderLayout.CENTER);

        // Create a JPanel to hold the components of the VRD station
        vrdObjectPanel.setLayout(new BoxLayout(vrdObjectPanel, BoxLayout.Y_AXIS));
        vrdObjectPanel.add(receivedMsgsPanel);
        vrdObjectPanel.add(msgRemovePanel);
        vrdObjectPanel.add(terminateVRDPanel);
        msgRemoveCheckBoxThread.start();
    }

    public static VirtualReceivingDevice chooseRandomVRD() {
        if (vrdList.size() != 0) {
            int randomVRD = (int) ((Math.random() * (vrdList.size())));
            return vrdList.get(randomVRD);
        }
        return null;
    }

    public static VirtualReceivingDevice getVRD(String deviceNum) {
        for (VirtualReceivingDevice vrd : vrdList) {
            if (deviceNum.equals(vrd.deviceNumber)) return vrd;
        }
        return null;
    }

    public static boolean checkingVRDAddress(String addressInMessage) {
        for (VirtualReceivingDevice vrd : vrdList) {
            if(Objects.equals(vrd.getDeviceNumber(), addressInMessage)) return true;
        }
        return false;
    }

    public int getReceivedMessagesCounter() {
        return messagesReceivedList.size();
    }

    public void receiveSMS(String message) {
        messagesReceivedList.add(message);
        updateReceivedMessagesLabel();
        System.out.println(message);
    }

    private void updateReceivedMessagesLabel() {
        receivedMsgs.setText(String.valueOf(this.getReceivedMessagesCounter()));
    }

    public String getDeviceNumber() {
        return deviceNumber;
    }

    public JPanel getVrdObjectPanel() {
        return vrdObjectPanel;
    }

    static String generateRandomAddress() {
        String[] prefixes = { "+380", "+1", "+375", "+48", "+235" };
        int prefixIndex = (int) (Math.random() * prefixes.length);

        String randomAddress = prefixes[prefixIndex];
        for (int i = 0; i < 8; i++) {
            int digit = (int) (Math.random() * 10);
            randomAddress += digit;
        }
        return randomAddress;
    }
}
